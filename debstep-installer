#!/bin/bash

# Exit immediately if any command exits with a non-zero status
set -e

# Check if running as root
if [ "$EUID" -ne 0 ]; then
    echo "This script must be run as root or with sudo privileges."
    exit 1
fi

# This variable configures where sources are checked out
SRC="/gnustep-src"

# Determine number of CPUs when building
CPUS=$(nproc)

bootstrap()
{
  # Install necessary build dependencies
  apt-get update
  apt-get install -y \
    libcurl4-openssl-dev \
    libmagic-dev \
    libudisks2-dev \
    libdbus-1-dev \
    libupower-glib-dev \
    libxkbfile-dev \
    libxcursor-dev \
    libgconf2-dev \
    libgtk2.0-dev \
    libglib2.0-dev \
    libxrandr-dev \
    libpulse-dev \
    libpam0g-dev \
    git \
    sudo
}

checkout()
{
  # Clone the GNUstep-related repositories
  git clone -b master https://github.com/gnustep/tools-scripts.git ${SRC}/tools-scripts --depth=1
  git clone -b make-2_9_1 https://github.com/gnustep/tools-make.git ${SRC}/tools-make --depth=1
  git clone -b v2.2 https://github.com/gnustep/libobjc2.git ${SRC}/libobjc2 --depth=1
  git clone -b swift-5.9.2-RELEASE https://github.com/apple/swift-corelibs-libdispatch.git ${SRC}/swift-corelibs-libdispatch --depth=1
  git clone -b main https://github.com/trunkmaster/apple-corefoundation.git ${SRC}/apple-corefoundation --depth=1 
  git clone -b base-1_29_0 https://github.com/gnustep/libs-base.git ${SRC}/libs-base --depth=1
  git clone -b gui-0_30_0 https://github.com/gnustep/libs-gui.git ${SRC}/libs-gui --depth=1
  git clone -b back-0_30_0 https://github.com/gnustep/libs-back.git ${SRC}/libs-back --depth=1
  git clone -b master https://github.com/gnustep/apps-gworkspace.git ${SRC}/apps-gworkspace --depth=1
  git clone -b master https://github.com/gnustep/apps-systempreferences.git ${SRC}/apps-systempreferences --depth=1
  git clone -b master https://github.com/gnustep/plugins-themes-Gtk ${SRC}/plugins-themes-Gtk --depth=1
  git clone -b master https://github.com/pkgdemon/nextspace ${SRC}/nextspace --depth=1
  git clone -b gorm-1_3_1 https://github.com/gnustep/apps-gorm ${SRC}/apps-gorm --depth=1
  git clone -b projectcenter-0_7_0 https://github.com/gnustep/apps-projectcenter ${SRC}/apps-projectcenter --depth=1
  git clone -b master https://github.com/gnustep/gap ${SRC}/gap --depth=1
}

source_overlay()
{
  cp FilesystemLayouts/debstep ${SRC}/tools-make/FilesystemLayouts/debstep
}

tools_scripts()
{
  cd "${SRC}/tools-scripts" && ./install-dependencies-linux
}

gnustep_make() 
{
  # Check if GNUstep.sh exists
  if [ -f "/Developer/Makefiles/GNUstep.sh" ]; then
    echo "tools-make already exists. Skipping installation."
    # shellcheck disable=SC1091
    . /Developer/Makefiles/GNUstep.sh
  else
    cd "${SRC}/tools-make" && ./configure \
      --with-layout=debstep \
      --with-config-file=/Library/Preferences/GNUstep.conf \
      --with-library-combo=ng-gnu-gnu \
       && gmake -j"${CPUS}" || exit 1 && gmake install
    # shellcheck disable=SC1091
    . /Developer/Makefiles/GNUstep.sh
  fi
}

libdispatch() 
{
  export GNUSTEP_INSTALLATION_DOMAIN=SYSTEM
  mkdir "${SRC}/swift-corelibs-libdispatch/Build"
  cd "${SRC}/swift-corelibs-libdispatch/Build" && cmake .. \
    -DCMAKE_BUILD_TYPE=Release \
    -DCMAKE_C_COMPILER=clang \
    -DCMAKE_CXX_COMPILER=clang++ \
    -DCMAKE_INSTALL_PREFIX=/System \
	  -DCMAKE_INSTALL_LIBDIR=/System/lib \
	  -DCMAKE_INSTALL_MANDIR=/System/Documentation/man \
	  -DINSTALL_PRIVATE_HEADERS=YES
  gmake -j"${CPUS}" || exit 1
  gmake install
  rm /System/include/Block_private.h
}

foundation()
{
  export GNUSTEP_INSTALLATION_DOMAIN=SYSTEM
  C_FLAGS="-I/System/include -Wno-switch -Wno-enum-conversion"
  mkdir "${SRC}/apple-corefoundation/Build"
  cd "${SRC}/apple-corefoundation/Build" && cmake .. \
    -DCMAKE_BUILD_TYPE=Release \
    -DCMAKE_C_COMPILER=clang \
    -DCMAKE_C_FLAGS="${C_FLAGS}" \
	  -DCMAKE_SHARED_LINKER_FLAGS="-L/System/lib -luuid" \
	  -DCF_DEPLOYMENT_SWIFT=NO \
	  -DBUILD_SHARED_LIBS=YES \
	  -DCMAKE_INSTALL_PREFIX=/System \
	  -DCMAKE_INSTALL_LIBDIR=/System/lib \
	  -DCMAKE_LIBRARY_PATH=/System/lib \
	  -DCMAKE_SKIP_RPATH=ON
  gmake -j"${CPUS}" || exit 1
  gmake install
}

libobjc2() 
{
  export GNUSTEP_INSTALLATION_DOMAIN=SYSTEM
  mkdir "${SRC}/libobjc2/Build"
  cd "${SRC}/libobjc2/Build" && cmake .. \
    -DGNUSTEP_INSTALL_TYPE=SYSTEM \
    -DCMAKE_BUILD_TYPE=Release \
    -DCMAKE_C_COMPILER=clang \
    -DCMAKE_CXX_COMPILER=clang++
  gmake -j"${CPUS}" || exit 1
  gmake install
}

gnustep() 
{
  export GNUSTEP_INSTALLATION_DOMAIN=SYSTEM
  if [ -d "/System/Libraries/gnustep-base/" ] ; then
    echo "gnustep-base already exists. Skipping installation."
  else
    cd "${SRC}/libs-base" && ./configure \
      --with-installation-domain=SYSTEM \
      && gmake -j"${CPUS}" || exit 1 && gmake install
  fi
  if [ -d "/System/Libraries/gnustep-gui" ] ; then
    echo "libs-gui already exists.  Skipping installation."
  else
    cd "${SRC}/libs-gui" && ./configure \
      && gmake -j"${CPUS}" || exit 1 || exit 1 && gmake install
  fi
  if [ -d "/System/Bundles/libgnustep-back-030.bundle" ] ; then
    echo "libs-back already exists. Skipping installation."
  else
    cd "${SRC}/libs-back" && ./configure \
      && gmake -j"${CPUS}" || exit 1 && gmake install
  fi
  if [ -d "/System/Applications/GWorkspace.app" ] ; then
    echo "Gworkspace already exists.  Skipping installation."
  else
    cd "${SRC}/apps-gworkspace" && ./configure && gmake && gmake install
  fi
  if [ -d "/System/Applications/SystemPreferences.app" ] ; then
    echo "SystemPreferences already exists.  Skipping installation."
  else
    cd ${SRC}/apps-systempreferences && gmake -j"${CPUS}" && gmake install
  fi
  cd ${SRC}/plugins-themes-Gtk && gmake -j"${CPUS}" || exit 1 && gmake install
  cd ${SRC}/nextspace/Frameworks && gmake -j"${CPUS}" || exit 1 && gmake install
}

developer()
{
  export GNUSTEP_INSTALLATION_DOMAIN=NETWORK
  if [ -d "/Developer/Applications/Gorm.app" ] ; then
    echo "Gorm already exists.  Skipping installation."
  else
    cd "${SRC}/apps-gorm" && gmake -j"${CPUS}" || exit 1 && gmake install
  fi
    if [ -d "/Developer/Applications/ProjectCenter.app" ] ; then
    echo "ProjectCenter already exists.  Skipping installation."
  else
    cd "${SRC}/apps-projectcenter" && gmake -j"${CPUS}" || exit 1 && gmake install
  fi
}

apps()
{
  export GNUSTEP_INSTALLATION_DOMAIN=LOCAL
  cd ${SRC}/gap/system-apps/Terminal && gmake -j"${CPUS}" || exit 1 && gmake install
}

cleanup()
{
  # Cleanup GNUstep sources
  rm -rf ${SRC}
}

bootstrap
checkout
source_overlay
tools_scripts
gnustep_make
libdispatch
foundation
libobjc2
gnustep
developer
apps
cleanup